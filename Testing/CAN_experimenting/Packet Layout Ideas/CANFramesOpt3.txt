
// From the DAVE_AK can library
typedef union {
    uint64_t value;
  struct {
    uint32_t low;
    uint32_t high;
  };
  struct {
        uint16_t s0;
    uint16_t s1;
    uint16_t s2;
    uint16_t s3;
    };
  uint8_t bytes[8];
} BytesUnion;

typedef struct
{
  uint32_t id;    // EID if ide set, SID otherwise
  uint32_t fid;   // family ID
  uint8_t rtr;    // Remote Transmission Request
  uint8_t priority; // Priority but only important for TX frames and then only for special uses.
  uint8_t extended; // Extended ID flag
  uint8_t length;   // Number of data bytes
  BytesUnion data;  // 64 bits - lots of ways to access it.
  union
  {
    float data;
    float foo;
  }
} CAN_FRAME;
//End of DAVE_AK code

CAN_FRAME.data

struct SpecificCommand
{
  float a; // Frame Location: low
  float b; // Frame Location: high
  SpecificCommand(){}
  SpecificCommand(CAN_FRAME& t)
  {
    // Copy correct values from Frame into a and b.
    a = CAN_FRAME.data.low;
    b = CAN_FRAME.data.high;
  }
  
  Frame generate_frame()
  {
    //Copy a and b into correct locaions in a new Frame and return it.
    Frame newFrame();
    Frame.data.low = a;
    Frame.data.high = b;
  }


void main() {
	Drive_Cmd bar;

	bar.a = 5;
  Send_CAN_Packet(bar.generate_frame());

}

    //Pros: Not architecture or compiler dependent.
    //Cons: Values must be accessed using a dereference operator. :(